// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_id(): string {
    let value = this.get("block_id");
    return value!.toString();
  }

  set block_id(value: string) {
    this.set("block_id", Value.fromString(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value!.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }

  get previous_id(): string | null {
    let value = this.get("previous_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previous_id(value: string | null) {
    if (!value) {
      this.unset("previous_id");
    } else {
      this.set("previous_id", Value.fromString(<string>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx_id(): string {
    let value = this.get("tx_id");
    return value!.toString();
  }

  set tx_id(value: string) {
    this.set("tx_id", Value.fromString(value));
  }

  get block_height(): BigInt {
    let value = this.get("block_height");
    return value!.toBigInt();
  }

  set block_height(value: BigInt) {
    this.set("block_height", Value.fromBigInt(value));
  }

  get block_id(): string {
    let value = this.get("block_id");
    return value!.toString();
  }

  set block_id(value: string) {
    this.set("block_id", Value.fromString(value));
  }

  get last_tx(): string {
    let value = this.get("last_tx");
    return value!.toString();
  }

  set last_tx(value: string) {
    this.set("last_tx", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get data_root(): string {
    let value = this.get("data_root");
    return value!.toString();
  }

  set data_root(value: string) {
    this.set("data_root", Value.fromString(value));
  }

  get data_size(): Bytes {
    let value = this.get("data_size");
    return value!.toBytes();
  }

  set data_size(value: Bytes) {
    this.set("data_size", Value.fromBytes(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value!.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get quantity(): Bytes {
    let value = this.get("quantity");
    return value!.toBytes();
  }

  set quantity(value: Bytes) {
    this.set("quantity", Value.fromBytes(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    return value!.toBytes();
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }

  get reward(): Bytes {
    let value = this.get("reward");
    return value!.toBytes();
  }

  set reward(value: Bytes) {
    this.set("reward", Value.fromBytes(value));
  }
}
