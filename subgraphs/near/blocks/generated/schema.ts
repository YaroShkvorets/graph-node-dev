// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BlockEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockEvent", id.toString(), this);
    }
  }

  static load(id: string): BlockEvent | null {
    return changetype<BlockEvent | null>(store.get("BlockEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value!.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }

  get prevHeight(): BigInt {
    let value = this.get("prevHeight");
    return value!.toBigInt();
  }

  set prevHeight(value: BigInt) {
    this.set("prevHeight", Value.fromBigInt(value));
  }

  get blockOrdinal(): BigInt {
    let value = this.get("blockOrdinal");
    return value!.toBigInt();
  }

  set blockOrdinal(value: BigInt) {
    this.set("blockOrdinal", Value.fromBigInt(value));
  }

  get epochId(): Bytes {
    let value = this.get("epochId");
    return value!.toBytes();
  }

  set epochId(value: Bytes) {
    this.set("epochId", Value.fromBytes(value));
  }

  get nextEpochId(): Bytes {
    let value = this.get("nextEpochId");
    return value!.toBytes();
  }

  set nextEpochId(value: Bytes) {
    this.set("nextEpochId", Value.fromBytes(value));
  }

  get chunksIncluded(): BigInt {
    let value = this.get("chunksIncluded");
    return value!.toBigInt();
  }

  set chunksIncluded(value: BigInt) {
    this.set("chunksIncluded", Value.fromBigInt(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get prevHash(): Bytes {
    let value = this.get("prevHash");
    return value!.toBytes();
  }

  set prevHash(value: Bytes) {
    this.set("prevHash", Value.fromBytes(value));
  }

  get timestampNanosec(): BigInt {
    let value = this.get("timestampNanosec");
    return value!.toBigInt();
  }

  set timestampNanosec(value: BigInt) {
    this.set("timestampNanosec", Value.fromBigInt(value));
  }

  get prevStateRoot(): Bytes {
    let value = this.get("prevStateRoot");
    return value!.toBytes();
  }

  set prevStateRoot(value: Bytes) {
    this.set("prevStateRoot", Value.fromBytes(value));
  }

  get chunkReceiptsRoot(): Bytes {
    let value = this.get("chunkReceiptsRoot");
    return value!.toBytes();
  }

  set chunkReceiptsRoot(value: Bytes) {
    this.set("chunkReceiptsRoot", Value.fromBytes(value));
  }

  get chunkHeadersRoot(): Bytes {
    let value = this.get("chunkHeadersRoot");
    return value!.toBytes();
  }

  set chunkHeadersRoot(value: Bytes) {
    this.set("chunkHeadersRoot", Value.fromBytes(value));
  }

  get chunkTxRoot(): Bytes {
    let value = this.get("chunkTxRoot");
    return value!.toBytes();
  }

  set chunkTxRoot(value: Bytes) {
    this.set("chunkTxRoot", Value.fromBytes(value));
  }

  get outcomeRoot(): Bytes {
    let value = this.get("outcomeRoot");
    return value!.toBytes();
  }

  set outcomeRoot(value: Bytes) {
    this.set("outcomeRoot", Value.fromBytes(value));
  }

  get challengesRoot(): Bytes {
    let value = this.get("challengesRoot");
    return value!.toBytes();
  }

  set challengesRoot(value: Bytes) {
    this.set("challengesRoot", Value.fromBytes(value));
  }

  get randomValue(): Bytes {
    let value = this.get("randomValue");
    return value!.toBytes();
  }

  set randomValue(value: Bytes) {
    this.set("randomValue", Value.fromBytes(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get lastFinalBlock(): Bytes {
    let value = this.get("lastFinalBlock");
    return value!.toBytes();
  }

  set lastFinalBlock(value: Bytes) {
    this.set("lastFinalBlock", Value.fromBytes(value));
  }

  get lastDsFinalBlock(): Bytes {
    let value = this.get("lastDsFinalBlock");
    return value!.toBytes();
  }

  set lastDsFinalBlock(value: Bytes) {
    this.set("lastDsFinalBlock", Value.fromBytes(value));
  }

  get nextBpHash(): Bytes {
    let value = this.get("nextBpHash");
    return value!.toBytes();
  }

  set nextBpHash(value: Bytes) {
    this.set("nextBpHash", Value.fromBytes(value));
  }

  get blockMerkleRoot(): Bytes {
    let value = this.get("blockMerkleRoot");
    return value!.toBytes();
  }

  set blockMerkleRoot(value: Bytes) {
    this.set("blockMerkleRoot", Value.fromBytes(value));
  }

  get epochSyncDataHash(): Bytes {
    let value = this.get("epochSyncDataHash");
    return value!.toBytes();
  }

  set epochSyncDataHash(value: Bytes) {
    this.set("epochSyncDataHash", Value.fromBytes(value));
  }

  get latestProtocolVersion(): i32 {
    let value = this.get("latestProtocolVersion");
    return value!.toI32();
  }

  set latestProtocolVersion(value: i32) {
    this.set("latestProtocolVersion", Value.fromI32(value));
  }
}
